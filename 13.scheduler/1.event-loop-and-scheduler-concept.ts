/**
 * 스케줄러란 옵저버가 옵저버블을 구독할 때 값을 전달받는 순서와 실행 컨택스트를 관리하는 역할을 하는 자료구조이다.
 * RxJava처럼 다중 스레드를 지원하는 언어의 경우 Rx가 여러 스레드를 관리하려고 좀 더 세분화한 스케줄러를 제공한다.
 * 하지만 RxJS는 다음 이벤트 루프에서 작업을 처리하도록 미루는 수준의 스케줄러가 존재한다.
 * RxJS는 브라우저와 Node.js 각 플랫폼 환경에 따라 제공하는 API를 적절하게 활용하여 이벤트 루프 주조에서 로직 처리를 미루는 스케줄러를 구현한다.
 *
 * 주요 API는 다음과 같다.
 * - setTimeout
 * - setInterval
 * - setImmediate: 마이크로소프트 계열 브라우저와 Node.js에서 현재 이벤트 루프 주기 끝에 로직을 실행한다.
 * - process.nextTick: Node.js에서 이벤트 루프와 관계없이 무조건 현재 작업이 완료된 직후 로직을 실행한다.
 * - window.requestAnimationFrame: 브라우저애서 프레임이 끊기지 않도록 각 프레임마다 로직을 실행한다.
 *
 * 즉 RxJS의 스케줄러는 시간 기반의 스케줄러와 비동기 처리를 위한 스케줄러, 브라우저의 애니메이션 프레임 손실을 막는 스케줄러로 나뉜다.
 * 또한 subscribeOn, observeOn 연산자의 인자로 스케줄러를 사용해 스케줄러를 바꿔줄 수 있다.
 *
 * RxJS에서 스케줄러의 구성 요소를 다음과 같이 정의한다.
 * - 지료구조: 작업들의 우선 순위나 다른 기준에 따라서 저장하고 큐잉한다.
 * - 실행 컨택스트: 작업을 실행하는 때와 위치를 가리킨다.
 *   (바로 실행, setTimeout, process.nextTick, requestAnimationFrame과 같은 콜백 매커니즘을 사용하는 것을 말함.)
 * - (가상) 클락((virtual) clock): now 함수라는 스케줄러의 시간을 가리키는 게터 함수를 제공한다.
 *   특정 스케줄러에 스케줄한 작업들은 클락으로 설정한 시간에 맞춰 동작한다.
 *
 * 다음과 같은 형식으로 스케줄러를 활용할 수 있다.
 * - subscribeOn, observeOn 연산자
 * - 스케줄러를 인자로 사용하는 연산자 사용
 * - 직접 연산자를 구현할 때 스케줄러에 있는 schedule 함수를 호출 (내부에서 스케줄러가 어떤 순서로 작업을 처리해야 할지 정할 수 있다.)
 */
